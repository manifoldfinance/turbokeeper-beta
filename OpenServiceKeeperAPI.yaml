asyncapi: 2.0.0
info:
  title: keep3r API
  version: '1.0.0'
  description: |
    The OpenService Broker keep3r API allows you to remotely manage your keeper service broker .

    ### Check out its awesome features:
    * Turn a specific transaction filter  on/off ðŸŒƒ
    * standby a specific transaction ðŸ˜Ž
    * Receive real-time information about transaction pricing conditions ðŸ“ˆ
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  production:
    url: api.keep3r.osb.com:{port}
    protocol: mqtt
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    security:
      - apiKey: []
      - supportedOauthFlows:
        - keep3r:on
        - keep3r:off
        - keep3r:standby
      - openIdConnectWellKnown: []

defaultContentType: application/json

channels:
  osb/keep3r/1/0/event/{brokerServiceProviderId}/lighting/measured:
    description: The topic on which measured values may be produced and consumed.
    parameters:
      brokerServiceProviderId:
        $ref: '#/components/parameters/brokerServiceProviderId'
    subscribe:
      summary: Receive information about transaction pricing conditions.
      operationId: receiveGweiPricingMeasurement
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/lightMeasured'

  osb/keep3r/1/0/action/{brokerServiceProviderId}/turn/on:
    parameters:
      brokerServiceProviderId:
        $ref: '#/components/parameters/brokerServiceProviderId'
    publish:
      operationId: turnOn
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'

  osb/keep3r/1/0/action/{brokerServiceProviderId}/turn/off:
    parameters:
      brokerServiceProviderId:
        $ref: '#/components/parameters/brokerServiceProviderId'
    publish:
      operationId: turnOff
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/turnOnOff'

  osb/keep3r/1/0/action/{brokerServiceProviderId}/standby:
    parameters:
      brokerServiceProviderId:
        $ref: '#/components/parameters/brokerServiceProviderId'
    publish:
      operationId: standbyLight
      traits:
        - $ref: '#/components/operationTraits/kafka'
      message:
        $ref: '#/components/messages/standbyLight'

components:
  messages:
    lightMeasured:
      name: lightMeasured
      title: Light measured
      summary: Inform about transaction pricing conditions for a particular streetlight.
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/transactionPayloadSensitivity"
    turnOnOff:
      name: turnOnOff
      title: Turn on/off
      summary: Command a particular streetlight to turn the lights on or off.
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/turnOnOffPayload"
    standbyLight:
      name: standbyLight
      title: standby light
      summary: Command a particular streetlight to standby the lights.
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/standbyLightPayload"

  schemas:
    transactionPayloadSensitivity:
      type: object
      properties:
        transaction:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          $ref: "#/components/schemas/sentAt"
    turnOnOffPayload:
      type: object
      properties:
        command:
          type: string
          enum:
            - on
            - off
          description: Whether to turn on or off the light.
        sentAt:
          $ref: "#/components/schemas/sentAt"
    standbyLightPayload:
      type: object
      properties:
        percentage:
          type: integer
          description: Percentage to which the light should be standbymed to.
          minimum: 0
          maximum: 100
        sentAt:
          $ref: "#/components/schemas/sentAt"
    sentAt:
      type: string
      format: date-time
      description: Date and time when the message was sent.

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    supportedOauthFlows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        implicit:
          authorizationUrl: 'https://authserver.example/auth'
          scopes:
            'keep3r:on': Ability to switch lights on
            'keep3r:off': Ability to switch lights off
            'keep3r:standby': Ability to standby the lights
        password:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'keep3r:on': Ability to switch lights on
            'keep3r:off': Ability to switch lights off
            'keep3r:standby': Ability to standby the lights
        clientCredentials:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'keep3r:on': Ability to switch lights on
            'keep3r:off': Ability to switch lights off
            'keep3r:standby': Ability to standby the lights
        authorizationCode:
          authorizationUrl: 'https://authserver.example/auth'
          tokenUrl: 'https://authserver.example/token'
          refreshUrl: 'https://authserver.example/refresh'
          scopes:
            'keep3r:on': Ability to switch lights on
            'keep3r:off': Ability to switch lights off
            'keep3r:standby': Ability to standby the lights
    openIdConnectWellKnown:
      type: openIdConnect
      openIdConnectUrl: 'https://authserver.example/.well-known'

  parameters:
    brokerServiceProviderId:
      description: The ID of the streetlight.
      schema:
        type: string

  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100

  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId: my-app-id
